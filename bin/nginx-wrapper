#!/bin/bash
set -o errexit
set -o pipefail

echo "Configure TCP proxy for: ${PROXY_CONFIGURATION}"

if [[ -n "${SSL:-}" ]]; then
  echo "Enabling SSL termination"

  SSL_CERTIFICATE_FILE="$(mktemp)"
  printf "%s" "$SSL_CERTIFICATE" > "$SSL_CERTIFICATE_FILE"
  unset SSL_CERTIFICATE

  SSL_KEY_FILE="$(mktemp)"
  printf "%s" "$SSL_KEY" > "$SSL_KEY_FILE"
  unset SSL_KEY

  export SSL_CERTIFICATE_FILE
  export SSL_KEY_FILE

  # Unless overridden, use a default configuration that enables PFS for most
  # browsers and provides SSLv3 while mitigating POODLE by avoiding CBC-mode
  # ciphers. Reference: http://serverfault.com/a/637849
  SSL_CIPHERS="ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS"
  SSL_PROTOCOLS="TLSv1 TLSv1.1 TLSv1.2"

  if [ -n "$DISABLE_WEAK_CIPHER_SUITES" ]; then
    # Only TLS 1.0 and up, enable PFS for most clients but provide DES-CBC3-SHA
    # for clients like IE 8 on Win XP or Java 6 that don't support PFS. IE 6 on
    # Win XP can use DES-CBC3-SHA if TLS 1.0 is manually enabled on the client.
    SSL_CIPHERS="EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH:DES-CBC3-SHA:EDH+aRSA!aNULL:!eNULL:!LOW:!EXP:!PSK:!SRP:!DSS:!CAMELLIA:!SEED:!RC4:!MD5"
    SSL_PROTOCOLS="TLSv1 TLSv1.1 TLSv1.2"
  fi

  # Finally, allow either SSL_CIPHERS or SSL_PROTOCOLS to be overridden
  # individually with *OVERRIDE environment variables.
  [ -n "$SSL_CIPHERS_OVERRIDE" ] && SSL_CIPHERS="${SSL_CIPHERS_OVERRIDE//;}"
  [ -n "$SSL_PROTOCOLS_OVERRIDE" ] && SSL_PROTOCOLS="${SSL_PROTOCOLS_OVERRIDE//;}"

  export SSL_CIPHERS SSL_PROTOCOLS
fi

CONFIG="$(mktemp)"
erb /etc/nginx.conf.erb > "$CONFIG"

echo "Start TCP proxy using: ${CONFIG}"
cat "$CONFIG"

exec nginx -c "$CONFIG"
